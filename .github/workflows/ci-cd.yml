name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'web-ui/**'
      - '.github/workflows/ci-cd.yml'
      - 'requirements.txt'
      - 'tests/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'web-ui/**'
      - '.github/workflows/ci-cd.yml'
      - 'requirements.txt'
      - 'tests/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# Set up environment variables
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: ai-content-backend
  ECR_REPOSITORY_FRONTEND: ai-content-frontend
  ECS_CLUSTER: ai-content-cluster
  ECS_SERVICE_BACKEND: ai-content-backend-service
  ECS_SERVICE_FRONTEND: ai-content-frontend-service

jobs:
  # Code Quality and Testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Python dependencies
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Cache Node.js dependencies
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: web-ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('web-ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install -r backend/requirements.txt
          pip install -r tests/requirements-test.txt

      - name: Install Node.js dependencies
        run: |
          cd web-ui
          npm ci

      - name: Run Python linting
        run: |
          pip install flake8 black isort
          flake8 backend/ Agents/ orchestration.py pdf_generator.py
          black --check backend/ Agents/ orchestration.py pdf_generator.py
          isort --check-only backend/ Agents/ orchestration.py pdf_generator.py

      - name: Run Node.js linting
        run: |
          cd web-ui
          npm run lint

      - name: Run Python tests
        run: |
          pytest tests/ -v --cov=backend --cov=Agents --cov=orchestration --cov=pdf_generator | tee pytest-report.txt

      - name: Run Node.js tests
        run: |
          cd web-ui
          npm test | tee nodejs-test-report.txt

      # Upload test reports as artifacts
      - name: Upload Python test report
        uses: actions/upload-artifact@v4
        with:
          name: python-test-report
          path: pytest-report.txt

      - name: Upload Node.js test report
        uses: actions/upload-artifact@v4
        with:
          name: nodejs-test-report
          path: web-ui/nodejs-test-report.txt

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Build and Push Backend
  build-backend:
    name: Build and Push Backend
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    # Only run if backend or shared files changed
    paths:
      - 'backend/**'
      - 'requirements.txt'
      - '.github/workflows/ci-cd.yml'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Enable Docker BuildKit and cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          BRANCH: ${{ github.ref_name }}
        run: |
          export DOCKER_BUILDKIT=1
          docker buildx build --cache-from=type=gha --cache-to=type=gha,mode=max \
            -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$BRANCH \
            -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.event.inputs.environment || 'dev' }} \
            ./backend --push

      # Upload Docker build logs as artifact
      - name: Upload backend Docker build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-docker-build-logs
          path: /tmp/buildkit*log*

  # Build and Push Frontend
  build-frontend:
    name: Build and Push Frontend
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    # Only run if frontend or shared files changed
    paths:
      - 'web-ui/**'
      - '.github/workflows/ci-cd.yml'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Enable Docker BuildKit and cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push frontend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          BRANCH: ${{ github.ref_name }}
        run: |
          export DOCKER_BUILDKIT=1
          docker buildx build --cache-from=type=gha --cache-to=type=gha,mode=max \
            -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$BRANCH \
            -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.event.inputs.environment || 'dev' }} \
            ./web-ui --push

      # Upload Docker build logs as artifact
      - name: Upload frontend Docker build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-docker-build-logs
          path: /tmp/buildkit*log* 