name: CI/CD Pipeline for AI App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
  ECR_REPO_BACKEND: ${{ secrets.ECR_REPO_BACKEND }}
  ECR_REPO_FRONTEND: ${{ secrets.ECR_REPO_FRONTEND }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE_BACKEND: ${{ secrets.ECS_SERVICE_BACKEND }}
  ECS_SERVICE_FRONTEND: ${{ secrets.ECS_SERVICE_FRONTEND }}
  CONTAINER_NAME_BACKEND: Backend
  CONTAINER_NAME_FRONTEND: Frontend

jobs:

  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'


      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements-dev.txt

      # - name: Run backend lint (flake8, black, isort)
      #   run: cd backend && flake8 . && black . --check && isort . --check

      - name: Run backend tests (pytest)
        run: cd backend && pytest 

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd web-ui
          npm ci

      # - name: Run frontend lint
      #   run: cd web-ui && npm run lint

      # - name: Run frontend tests
      #   run: cd web-ui && npm run test

  build-and-push:
    name: Build Docker & Push to ECR
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        run: |
          cd backend
          docker build -t $ECR_REPO_BACKEND:$GITHUB_SHA .
          docker push $ECR_REPO_BACKEND:$GITHUB_SHA

      - name: Build and push frontend image
        run: |
          cd web-ui
          docker build -t $ECR_REPO_FRONTEND:$GITHUB_SHA .
          docker push $ECR_REPO_FRONTEND:$GITHUB_SHA

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
    name: production

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Render backend task definition
        id: backend-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend-task-def.json
          container-name: ${{ env.CONTAINER_NAME_BACKEND }}
          image: ${{ env.ECR_REPO_BACKEND }}:${{ github.sha }}
          environment-variables: |
            EXECUTION_ROLE_ARN=${{ secrets.EXECUTION_ROLE_ARN }}
            TASK_ROLE_ARN=${{ secrets.TASK_ROLE_ARN }}

      - name: Deploy Backend Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.backend-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          wait-for-service-stability: true

      - name: Render frontend task definition
        id: frontend-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: frontend-task-def.json
          container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
          image: ${{ env.ECR_REPO_FRONTEND }}:${{ github.sha }}
          environment-variables: |
            EXECUTION_ROLE_ARN=${{ secrets.EXECUTION_ROLE_ARN }}
            TASK_ROLE_ARN=${{ secrets.TASK_ROLE_ARN }}

      - name: Deploy Frontend Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.frontend-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          wait-for-service-stability: true

      - name: Notify Success
        run: echo "Deployment completed successfully!"

